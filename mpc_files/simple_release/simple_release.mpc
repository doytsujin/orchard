execfile('/root/SCALE-MAMBA/Programs/ring/ring.mpc')
execfile('/root/SCALE-MAMBA/Programs/lwe/lwe.mpc')


# Number of committee members (full protocol has k+1 users)
k = 9

# Encryption parameters
l = 1
nBitsN = 13
N_ = 1 # Half-width of binomial distribution
lgM = 31
 
# w is chosen so that w^n = -1 (mod p) 
# where p is the size of the prime field
w = cint(216409912179401900965416891955038263635)**8
r = Ring(nBitsN, w)
lwe = LWE(r, N_, lgM, l) 

# Length of messages (array size)
N = 4096

# Basic encryption function
def encrypt(a, b, n):
	[u, v] = lwe.enc(a,b,n)
	return u

# Basic decryption function
def decrypt(enc_u, enc_v, s):
	cenc_u = cint.Array(N)
	cenc_v = cint.Array(N)
        @for_range(N)
	def reveal(i):
		cenc_u[i] = enc_u[i].reveal()
		cenc_v[i] = enc_v[i].reveal()
	return lwe.dec(cenc_u, cenc_v, s)

# Noises encryption appropriately and decrypts 
# by using shares of secret key. Returns noised (decrypted) result,
# after applying any additional orange zone computation.
def decryptAndNoise(enc_u, enc_v, s, w):

	# Specific query goes here:
	# In this case, just add noise and return vector
        result = sint.Array(N)
        z = decrypt(enc_u, enc_v, s)

        @for_range(N)
        def noise_z(i):
                result[i] = z[i] + sint.get_random_bit()
        return result 
	
# A provides encrypted aggregate data, threshold, delta
enc_u = sint.Array(N)
enc_v = sint.Array(N)

@for_range(N)
def set_U(i):
  enc_u[i] = sint.get_private_input_from(k)

@for_range(N)
def set_V(i):
  enc_v[i] = sint.get_private_input_from(k)


T = sint.get_private_input_from(k)
delta = sint.get_private_input_from(k)

# A also may provide some additional state (specific to query)
# In this case: none
w = 0

s = sint.Array(N)
#for i in range(N):
@for_range(N)
def copy(i):
	tmp = [sint()]
	input_shares(0, *tmp)
	s[i] = tmp[0]

# Decryption and main orange zone computation
query_result = decryptAndNoise(enc_u, enc_v, s, w)

# Final release
@for_range(N)
def q_reveal(i):
    query_result[i].reveal_to(k)
